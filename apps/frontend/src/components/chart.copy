import {
  createChart,
  ColorType,
  CandlestickSeries,
  LineSeries,
  type IChartApi,
  type CandlestickData,
  type CandlestickSeriesOptions,
  type CandlestickStyleOptions,
  type DeepPartial,
  type ISeriesApi,
  type LineData, // Used for buyPriceSeries updates
  type SeriesOptionsCommon,
  type Time,
  type WhitespaceData,
} from "lightweight-charts";
import { useEffect, useRef, useState } from "react";
import type { SYMBOL } from "../utils/constants";
import { Duration } from "../utils/constants";
import { Signalingmanager } from "../utils/subscription_manager";
import {
  getChartData,
  processRealupdate,
  resetLastCandle,
  type RealtimeUpdate,
} from "../utils/chart_agg_ws_api";
import type { Trade } from "./AskBidsTable";
import { toDisplayPrice } from "../utils/utils";

export default function ChartComponent({
  duration,
  symbol,
  onPriceUpdate,
}: {
  duration: Duration;
  symbol: SYMBOL;
  onPriceUpdate?: (prices: { buyPrice: number; sellPrice: number }) => void;
}) {
  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<IChartApi | null>(null);
  const [tooltip, setTooltip] = useState<string | null>(null);
  const [tooltipVisible, setTooltipVisible] = useState<boolean>(false);
  const tooltipTimeoutRef = useRef<number | null>(null);

  useEffect(() => {
    console.log("Symbol changed to:", symbol);
    const signalingManager = Signalingmanager.getInstance();
    console.log(
      "Active subscriptions:",
      signalingManager.getActiveSubscriptions()
    );
  }, [symbol]);

  useEffect(() => {
    if (tooltip) {
      setTooltipVisible(true);
      if (tooltipTimeoutRef.current) {
        clearTimeout(tooltipTimeoutRef.current);
      }
      tooltipTimeoutRef.current = window.setTimeout(() => {
        setTooltipVisible(false);
        setTooltip(null);
      }, 1500);
    }
    return () => {
      if (tooltipTimeoutRef.current) {
        clearTimeout(tooltipTimeoutRef.current);
      }
    };
  }, [tooltip]);

  useEffect(() => {
    if (!chartContainerRef.current || !symbol) return;

    console.log("Creating chart for symbol:", symbol, "duration:", duration);

    const containerRef = chartContainerRef.current;

    let candlestickSeries: ISeriesApi<
      "Candlestick",
      Time,
      CandlestickData<Time> | WhitespaceData<Time>,
      CandlestickSeriesOptions,
      DeepPartial<CandlestickStyleOptions & SeriesOptionsCommon>
    > | null = null;
    let buyPriceSeries: ISeriesApi<"Line"> | null = null;
    let chart: IChartApi | null = null;
    let unwatch: (() => void) | null = null;

    const initChart = async () => {
      chart = createChart(chartContainerRef.current!, {
        layout: {
          background: {
            type: ColorType.VerticalGradient,
            topColor: "#141D22",
            bottomColor: "#141D22",
          },
          textColor: "#FFFFFF",
        },
        width: chartContainerRef.current!.clientWidth,
        height: chartContainerRef.current!.clientHeight,
        timeScale: {
          timeVisible: true,
          secondsVisible: false,
        },
      });

      candlestickSeries = chart.addSeries(CandlestickSeries, {
        upColor: "#158BF9",
        downColor: "#EB483F",
        borderVisible: false,
        wickUpColor: "#EB483F",
        wickDownColor: "#EB483F",
      });

      buyPriceSeries = chart.addSeries(LineSeries, {
        color: "#4CAF50",
        lineVisible: false,
        lineWidth: 1,
        priceLineVisible: true,
        lastValueVisible: true,
      });

      const tickWrapper = (trade: Trade) => {
        if (trade.symbol !== symbol) return;

        const candle = processRealupdate(trade as RealtimeUpdate, duration);

        const prices = {
          buyPrice: trade.buyPrice || 0,
          sellPrice: trade.sellPrice || 0,
        };

        if (onPriceUpdate && prices.buyPrice > 0 && prices.sellPrice > 0) {
          onPriceUpdate(prices);
        }

        if (candle && candlestickSeries) {
          candlestickSeries.update(candle);

          if (buyPriceSeries && prices.buyPrice > 0) {
            const buyPricePoint: LineData = {
              time: candle.time,
              value: toDisplayPrice(prices.buyPrice),
            };
            buyPriceSeries.update(buyPricePoint);
          }
        }
      };

      const rawData = await getChartData(symbol, duration);
      candlestickSeries.setData(rawData);

      // Initialize buy price line with empty data to start
      if (rawData.length > 0) {
        // Create initial data points for buy price line using the candlestick data
        const initialBuyData = rawData.map((candle: CandlestickData<Time>) => ({
          time: candle.time,
          value: candle.close * 0.999,
        }));
        buyPriceSeries.setData(initialBuyData);
      }

      if (rawData.length > 10) {
        const visibleRange = {
          from: Math.max(0, rawData.length - 30), // Show last 30 candles or all if less
          to: rawData.length - 1,
        };
        chart.timeScale().setVisibleLogicalRange(visibleRange);
      } else {
        chart.timeScale().fitContent();
      }

      const legend = document.createElement("div");
      legend.className = "chart-legend";
      legend.style.position = "absolute";
      legend.style.left = "12px";
      legend.style.top = "12px";
      legend.style.zIndex = "2";
      legend.style.fontSize = "12px";
      legend.style.padding = "5px 8px";
      legend.style.borderRadius = "4px";
      legend.style.backgroundColor = "rgba(20, 29, 34, 0.8)";
      legend.style.color = "white";
      legend.style.display = "flex";
      legend.style.gap = "10px";

      const candleLabel = document.createElement("div");
      candleLabel.innerHTML =
        '<span style="color:#158BF9; font-size:16px;">●</span> Price';
      legend.appendChild(candleLabel);

      const buyLabel = document.createElement("div");
      buyLabel.innerHTML =
        '<span style="color:#4CAF50; font-size:16px;">●</span> Buy Price';
      legend.appendChild(buyLabel);

      containerRef.appendChild(legend);

      const signalingManager = Signalingmanager.getInstance();
      unwatch = signalingManager.watch(symbol, tickWrapper);

      console.log("Chart initialized for", symbol);

      chartRef.current = chart;
    };

    const handleResize = () => {
      if (chartContainerRef.current && chart) {
        const parent = chartContainerRef.current;
        chart.applyOptions({
          width: parent.clientWidth,
          height: parent.clientHeight,
        });
        chart.timeScale().fitContent();
      }
    };

    initChart();

    setTimeout(handleResize, 100);

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);

      if (unwatch) {
        unwatch();
        unwatch = null;
      }

      resetLastCandle(symbol, duration);

      // Remove the legend if it exists
      const legend = containerRef?.querySelector(".chart-legend");
      if (legend) {
        legend.remove();
      }

      if (chart) {
        chart.remove();
        chart = null;
      }

      if (tooltipTimeoutRef.current) {
        clearTimeout(tooltipTimeoutRef.current);
      }

      candlestickSeries = null;
      buyPriceSeries = null;
    };
  }, [duration, symbol, onPriceUpdate]);

  return (
    <div className="text-white h-full w-full relative">
      {tooltipVisible && tooltip && (
        <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-50 px-4 py-2 bg-[#0f171b] border border-[#263136] rounded-md text-sm shadow-lg transition-opacity">
          {tooltip}
        </div>
      )}
      <div className="bg-[#141D22] border border-[#263136] rounded-lg overflow-hidden h-full w-full flex flex-col">
        <div className="flex items-center justify-between p-1.5 border-b border-[#263136]">
          <div>
            <h2 className="text-sm md:text-base font-medium">{symbol}</h2>
            <div className="text-xs text-white/60">
              {duration === Duration.candles_1m && "1 Minute Chart"}
              {duration === Duration.candles_1d && "Daily Chart"}
              {duration === Duration.candles_1w && "Weekly Chart"}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="flex items-center border border-[#263136] rounded-md bg-[#0f171b]">
              <button
                className="p-1.5 rounded-l-md hover:bg-[#263136] transition-colors"
                onClick={() => {
                  if (chartRef.current) {
                    const logicalRange = chartRef.current
                      .timeScale()
                      .getVisibleLogicalRange();
                    if (logicalRange !== null) {
                      const newRange = {
                        from:
                          logicalRange.from +
                          (logicalRange.to - logicalRange.from) * 0.2,
                        to:
                          logicalRange.to -
                          (logicalRange.to - logicalRange.from) * 0.2,
                      };
                      chartRef.current
                        .timeScale()
                        .setVisibleLogicalRange(newRange);
                      setTooltip("Zoomed in");
                    }
                  }
                }}
                title="Zoom In"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="11" cy="11" r="8"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  <line x1="11" y1="8" x2="11" y2="14"></line>
                  <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
              </button>
              <div className="w-[1px] h-6 bg-[#263136]"></div>
              <button
                className="p-1.5 hover:bg-[#263136] transition-colors"
                onClick={() => {
                  if (chartRef.current) {
                    const logicalRange = chartRef.current
                      .timeScale()
                      .getVisibleLogicalRange();
                    if (logicalRange !== null) {
                      const rangeSize = logicalRange.to - logicalRange.from;
                      const newRange = {
                        from: logicalRange.from - rangeSize * 0.2,
                        to: logicalRange.to + rangeSize * 0.2,
                      };
                      chartRef.current
                        .timeScale()
                        .setVisibleLogicalRange(newRange);
                      setTooltip("Zoomed out");
                    }
                  }
                }}
                title="Zoom Out"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="11" cy="11" r="8"></circle>
                  <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
              </button>
              <div className="w-[1px] h-6 bg-[#263136]"></div>
              <button
                className="p-1.5 rounded-r-md hover:bg-[#263136] transition-colors"
                onClick={() => {
                  if (chartRef.current) {
                    chartRef.current.timeScale().fitContent();
                    setTooltip("Reset zoom");
                  }
                }}
                title="Reset Zoom"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
              </button>
            </div>
            <button className="p-1.5 rounded-md hover:bg-[#263136] transition-colors">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="14"
                height="14"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
              </svg>
            </button>
          </div>
        </div>
        <div className="flex-grow">
          <div ref={chartContainerRef} className="h-full w-full" />
        </div>
      </div>
    </div>
  );
}
