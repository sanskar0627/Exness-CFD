"use client";

import { useState, useEffect } from "react";
import axios from "axios";
import type { SYMBOL } from "../utils/constants";
import { createTrade, findUserAmount } from "../api/trade";
import { getAssetDetails, fallbackAssets } from "../api/asset";
import type { Asset } from "../types/asset";

export default function BuySell({
  buyPrice,
  sellPrice,
  symbol,
}: {
  buyPrice: number;
  sellPrice: number;
  symbol: SYMBOL;
}) {
  const [orderType, setOrderType] = useState<"market" | "pending">("market");
  const [margin, setMargin] = useState<number>(100);
  const [leverage, setLeverage] = useState<number>(1);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [tpEnabled, setTpEnabled] = useState<boolean>(false);
  const [slEnabled, setSlEnabled] = useState<boolean>(false);
  const [tpPrice, setTpPrice] = useState<string>("");
  const [slPrice, setSlPrice] = useState<string>("");
  const [activeTab, setActiveTab] = useState<"buy" | "sell">("buy");
  const [error, setError] = useState<string>("");
  const [success, setSuccess] = useState<string>("");
  const [userBalance, setUserBalance] = useState<number>(0);
  const [assets, setAssets] = useState<Asset[]>(fallbackAssets);
  const [currentAsset, setCurrentAsset] = useState<Asset | null>(null);

  useEffect(() => {
    const getUserBalance = async () => {
      try {
        const response = await findUserAmount();
        if (response && response.balance) {
          setUserBalance(response.balance.usd_balance);
        }
      } catch (err) {
        console.error("Error fetching user balance", err);
      }
    };
    
    const getAssets = async () => {
      try {
        const assetData = await getAssetDetails();
        if (assetData.length > 0) {
          setAssets(assetData);
          
          // Find the current asset based on symbol
          const asset = assetData.find(a => a.symbol === symbol);
          if (asset) {
            setCurrentAsset(asset);
          }
        }
      } catch (error) {
        console.error("Error loading assets:", error);
      }
    };
    
    getUserBalance();
    getAssets();
    
    const balanceIntervalId = setInterval(getUserBalance, 10000);
    const assetsIntervalId = setInterval(getAssets, 30000);
    
    return () => {
      clearInterval(balanceIntervalId);
      clearInterval(assetsIntervalId);
    };
  }, [symbol]);  const handleSubmitTrade = async () => {
    if (margin <= 0) {
      setError("Margin must be greater than 0");
      setTimeout(() => setError(""), 3000);
      return;
    }

    if (margin > userBalance) {
      setError("Insufficient balance");
      setTimeout(() => setError(""), 3000);
      return;
    }

    try {
      setIsSubmitting(true);
      setError("");

      const token =
        document.cookie
          .split("; ")
          .find((row) => row.startsWith("Authorization="))
          ?.split("=")[1] || "";

      const response = await await createTrade({
        symbol,
        activeTab,
        margin,
        leverage,
        tpEnabled,
        tpPrice,
        slEnabled,
        slPrice,
        token,
      });
      if (response.data && response.data.orderId) {
        setSuccess(`Order placed successfully!`);
        setTimeout(() => setSuccess(""), 3000);

        const balanceResponse = await findUserAmount();
        if (balanceResponse && balanceResponse.balance) {
          setUserBalance(balanceResponse.balance.usd_balance);
        }
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        setError(err.response?.data?.message || "Failed to place order");
        setTimeout(() => setError(""), 3000);
      } else {
        setError("An unexpected error occurred");
        setTimeout(() => setError(""), 3000);
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <aside
      className="w-full rounded-lg border border-[#263136] bg-[#141D22] text-white shadow-sm h-full flex flex-col"
      aria-label="Trade ticket"
    >
      <div className="flex border-b border-[#263136]">
        <button
          onClick={() => setActiveTab("buy")}
          className={`flex-1 py-2 text-center font-medium text-xs transition ${
            activeTab === "buy"
              ? "text-[#158BF9] border-b-2 border-[#158BF9]"
              : "text-white/70 hover:text-white"
          }`}
        >
          Buy {symbol}
        </button>
        <button
          onClick={() => setActiveTab("sell")}
          className={`flex-1 py-2 text-center font-medium text-xs transition ${
            activeTab === "sell"
              ? "text-[#EB483F] border-b-2 border-[#EB483F]"
              : "text-white/70 hover:text-white"
          }`}
        >
          Sell {symbol}
        </button>
      </div>

      <div className="p-3 flex-1 overflow-y-auto">
        <header className="mb-2">
          <div className="flex items-center justify-between">
            <h2 className="text-xs font-medium text-white/80">
              {activeTab === "buy" ? "Buy Order" : "Sell Order"}
            </h2>
            <span className="rounded-md border border-[#263136] bg-[#0f171b] px-1.5 py-0.5 text-xs text-white/70">
              {orderType === "market" ? "Market" : "Limit"}
            </span>
          </div>

          <div className="mt-2 flex items-center gap-2">
            {currentAsset ? (
              <div className="flex items-center gap-2 p-1.5 bg-[#0f171b]/80 rounded-md border border-[#263136]">
                <img 
                  src={currentAsset.imageUrl} 
                  alt={currentAsset.name} 
                  className="h-5 w-5 rounded-full"
                />
                <div>
                  <div className="text-sm font-semibold">{currentAsset.name}</div>
                  <div className="text-xs text-white/50">{symbol}/USDT</div>
                </div>
              </div>
            ) : (
              <div className="text-sm font-semibold">{symbol}</div>
            )}
            <div className="ml-auto text-xs text-white/70 bg-[#1c2a31] px-2 py-0.5 rounded">
              <span className="text-white/50">Balance:</span> {userBalance.toLocaleString('en-US', { minimumFractionDigits: 2 })} USD
            </div>
          </div>
        </header>

        <section className="grid grid-cols-2 gap-2 mt-3" aria-label="Prices">
          <div className="rounded-lg border border-[#263136] bg-[#0f171b]/70 p-2 relative overflow-hidden">
            <div className="flex items-center justify-between">
              <div className="text-xs text-white/60">Sell Price</div>
              <div className="text-[10px] bg-[#EB483F]/20 text-[#EB483F] px-1 py-0.5 rounded">SELL</div>
            </div>
            <div className="mt-1 text-base font-semibold text-[#EB483F] flex items-center">
              <span className="text-xs mr-1">$</span>{buyPrice}
            </div>
            <div className="absolute w-1 h-full bg-[#EB483F]/40 left-0 top-0"></div>
          </div>
          <div className="rounded-lg border border-[#263136] bg-[#0f171b]/70 p-2 relative overflow-hidden">
            <div className="flex items-center justify-between">
              <div className="text-xs text-white/60">Buy Price</div>
              <div className="text-[10px] bg-[#158BF9]/20 text-[#158BF9] px-1 py-0.5 rounded">BUY</div>
            </div>
            <div className="mt-1 text-base font-semibold text-[#158BF9] flex items-center">
              <span className="text-xs mr-1">$</span>{sellPrice}
            </div>
            <div className="absolute w-1 h-full bg-[#158BF9]/40 left-0 top-0"></div>
          </div>
        </section>

        <section className="mt-3" aria-label="Risk indicator">
          <div className="bg-[#0f171b] border border-[#263136] rounded-md p-2">
            <div className="flex items-center justify-between text-xs">
              <div className="flex items-center gap-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
                  <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                </svg>
                <span className="text-white/60">Risk Level</span>
              </div>
              <span className="font-medium text-green-400 bg-green-500/10 px-1.5 py-0.5 rounded text-[10px]">LOW</span>
            </div>
            <div className="mt-1.5 h-1.5 w-full rounded-full bg-[#263136] overflow-hidden">
              <div
                className="h-1.5 rounded-full bg-gradient-to-r from-green-500 to-green-400"
                style={{ width: "30%" }}
                aria-hidden="true"
              />
            </div>
          </div>
        </section>

        <div className="mt-3 bg-[#0f171b] border border-[#263136] rounded-md p-2">
          <div className="flex items-center gap-1 mb-1.5">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12 6 12 12 16 14"></polyline>
            </svg>
            <span className="text-xs text-white/60">Order Type</span>
          </div>
          <nav
            className="inline-flex w-full rounded-md border border-[#263136] bg-[#141D22] p-0.5"
            role="tablist"
            aria-label="Order type"
          >
            <button
              role="tab"
              aria-selected={orderType === "market"}
              className={`flex-1 rounded-md px-2 py-1.5 text-xs font-medium transition ${
                orderType === "market"
                  ? "bg-[#1c2a31] text-white shadow-sm"
                  : "text-white/70 hover:text-white"
              }`}
              onClick={() => setOrderType("market")}
            >
              Market
            </button>
            <button
              role="tab"
              aria-selected={orderType === "pending"}
              className={`flex-1 rounded-md px-2 py-1.5 text-xs font-medium transition ${
                orderType === "pending"
                  ? "bg-[#1c2a31] text-white shadow-sm"
                  : "text-white/70 hover:text-white"
              }`}
              onClick={() => setOrderType("pending")}
            >
              Limit
            </button>
          </nav>
        </div>

        <section className="mt-3 bg-[#0f171b] border border-[#263136] rounded-md p-2">
          <div className="flex items-center justify-between mb-1.5">
            <div className="flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
                <line x1="12" y1="1" x2="12" y2="23"></line>
                <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
              </svg>
              <label
                htmlFor="margin"
                className="text-xs text-white/60"
              >
                Trading Margin
              </label>
            </div>
            <span className="text-[10px] text-white/50 bg-[#1c2a31] px-1.5 py-0.5 rounded">${margin} USD</span>
          </div>

          <div className="flex items-center gap-2">
            <button
              type="button"
              aria-label="Decrease margin"
              className="rounded-md border border-[#263136] px-2 py-1 text-xs text-white/80 hover:bg-[#1c2a31] transition-colors"
              onClick={() => setMargin((prev) => Math.max(10, prev - 10))}
              disabled={isSubmitting}
            >
              −
            </button>
            <div className="w-full relative">
              <div className="absolute left-0 top-0 h-full px-2 flex items-center">
                <span className="text-xs text-white/50">$</span>
              </div>
              <input
                id="margin"
                name="margin"
                type="number"
                min={10}
                step={10}
                value={margin}
                onChange={(e) => setMargin(Number(e.target.value))}
                disabled={isSubmitting}
                className="w-full rounded-md border border-[#263136] bg-[#141D22] pl-6 pr-2 py-1.5 text-xs outline-none focus:border-[#158BF9] transition-colors"
              />
            </div>
            <button
              type="button"
              aria-label="Increase margin"
              className="rounded-md border border-[#263136] px-2 py-1 text-xs text-white/80 hover:bg-[#1c2a31] transition-colors"
              onClick={() => setMargin((prev) => prev + 10)}
              disabled={isSubmitting}
            >
              +
            </button>
          </div>
          
          <div className="mt-2 h-1 w-full bg-[#263136] rounded-full overflow-hidden">
            <div 
              className="h-full bg-gradient-to-r from-[#158BF9]/30 to-[#158BF9]/80" 
              style={{ width: `${Math.min(100, (margin / userBalance) * 100)}%` }}
            ></div>
          </div>
        </section>

        <section className="mt-3 bg-[#0f171b] border border-[#263136] rounded-md p-2">
          <div className="flex items-center justify-between mb-1.5">
            <div className="flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
                <path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"></path>
                <polygon points="12 15 17 21 7 21 12 15"></polygon>
              </svg>
              <label className="text-xs text-white/60">
                Leverage
              </label>
            </div>
            <div className="flex items-center">
              <div className="text-xs text-white/50 bg-[#1c2a31] px-1.5 py-0.5 rounded mr-1">
                <span className="text-white/70 font-medium">{leverage}x</span>
              </div>
              <div className="text-[10px] text-green-400 bg-green-500/10 px-1.5 py-0.5 rounded">
                ${(margin * leverage).toLocaleString("en-US")}
              </div>
            </div>
          </div>

          <div className="grid grid-cols-5 gap-1.5">
            {[1, 2, 5, 10, 20].map((lev) => (
              <button
                key={lev}
                type="button"
                className={`rounded-md border relative overflow-hidden ${
                  leverage === lev
                    ? "border-[#158BF9] bg-[#158BF9]/10 text-[#158BF9]"
                    : "border-[#263136] text-white/70 hover:bg-[#1c2a31]"
                } px-1 py-1.5 text-xs transition-all`}
                onClick={() => setLeverage(lev)}
                disabled={isSubmitting}
              >
                {leverage === lev && (
                  <div className="absolute top-0 left-0 w-1 h-full bg-[#158BF9]"></div>
                )}
                {lev}x
              </button>
            ))}
          </div>
        </section>

        <div className="mt-3 space-y-2">
          <div className="bg-[#0f171b] border border-[#263136] rounded-md p-2">
            <div className="flex items-center justify-between mb-1.5">
              <div className="flex items-center gap-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
                  <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                </svg>
                <label
                  htmlFor="tp-toggle"
                  className="text-xs text-white/60"
                >
                  Take Profit
                </label>
                <span className="bg-green-500/10 text-green-400 text-[10px] px-1.5 py-0.5 rounded">
                  Recommended
                </span>
              </div>
              <div className="flex items-center">
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    id="tp-toggle"
                    type="checkbox"
                    className="sr-only peer"
                    checked={tpEnabled}
                    onChange={(e) => setTpEnabled(e.target.checked)}
                  />
                  <div className="w-9 h-5 bg-[#1c2a31] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white/30 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-[#158BF9]/30"></div>
                </label>
              </div>
            </div>
            
            <div className="relative">
              <div className="absolute left-0 top-0 h-full px-2 flex items-center">
                <span className="text-xs text-white/50">$</span>
              </div>
              <input
                id="tp-price"
                name="tp"
                type="number"
                step="0.01"
                placeholder="Target Price"
                disabled={!tpEnabled}
                value={tpPrice}
                onChange={(e) => setTpPrice(e.target.value)}
                className={`
                  w-full rounded-md border border-[#263136] bg-[#141D22] pl-6 pr-2 py-1.5 text-xs outline-none 
                  ${tpEnabled ? "focus:border-[#158BF9] transition-colors" : "opacity-50"}
                `}
              />
            </div>
            
            {tpEnabled && (
              <div className="mt-1.5 flex items-center justify-between">
                <div className="flex items-center gap-1">
                  <div className="text-[10px] text-white/50">Est. Profit:</div>
                </div>
                <div className="text-[10px] text-green-400 bg-green-500/10 px-1.5 py-0.5 rounded">
                  +${tpPrice ? ((Number(tpPrice) - (activeTab === "buy" ? sellPrice : buyPrice)) * margin * leverage).toFixed(2) : "0.00"}
                </div>
              </div>
            )}
          </div>

          <div className="bg-[#0f171b] border border-[#263136] rounded-md p-2">
            <div className="flex items-center justify-between mb-1.5">
              <div className="flex items-center gap-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/60">
                  <path d="M10 16l-6-6 6-6"></path>
                  <path d="M20 21v-7a4 4 0 0 0-4-4H5"></path>
                </svg>
                <label
                  htmlFor="sl-toggle"
                  className="text-xs text-white/60"
                >
                  Stop Loss
                </label>
                <span className="bg-red-500/10 text-red-400 text-[10px] px-1.5 py-0.5 rounded">
                  Risk Protection
                </span>
              </div>
              <div className="flex items-center">
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    id="sl-toggle"
                    type="checkbox"
                    className="sr-only peer"
                    checked={slEnabled}
                    onChange={(e) => setSlEnabled(e.target.checked)}
                  />
                  <div className="w-9 h-5 bg-[#1c2a31] rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white/30 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-[#EB483F]/30"></div>
                </label>
              </div>
            </div>
            
            <div className="relative">
              <div className="absolute left-0 top-0 h-full px-2 flex items-center">
                <span className="text-xs text-white/50">$</span>
              </div>
              <input
                id="sl-price"
                name="sl"
                type="number"
                step="0.01"
                placeholder="Stop Price"
                disabled={!slEnabled}
                value={slPrice}
                onChange={(e) => setSlPrice(e.target.value)}
                className={`
                  w-full rounded-md border border-[#263136] bg-[#141D22] pl-6 pr-2 py-1.5 text-xs outline-none 
                  ${slEnabled ? "focus:border-[#EB483F] transition-colors" : "opacity-50"}
                `}
              />
            </div>
            
            {slEnabled && (
              <div className="mt-1.5 flex items-center justify-between">
                <div className="flex items-center gap-1">
                  <div className="text-[10px] text-white/50">Est. Loss:</div>
                </div>
                <div className="text-[10px] text-red-400 bg-red-500/10 px-1.5 py-0.5 rounded">
                  -${slPrice ? (Math.abs(Number(slPrice) - (activeTab === "buy" ? sellPrice : buyPrice)) * margin * leverage).toFixed(2) : "0.00"}
                </div>
              </div>
            )}
          </div>
          </div>
        </div>

        {error && (
          <div className="mt-2 p-1 bg-red-500/10 border border-red-500/30 rounded text-red-400 text-[10px]">
            {error}
          </div>
        )}

        {success && (
          <div className="mt-2 p-1 bg-green-500/10 border border-green-500/30 rounded text-green-400 text-[10px]">
            {success}
          </div>
        )}

        <button
          className={`mt-3 w-full rounded-md px-3 py-3 text-xs font-semibold transition-all flex items-center justify-center gap-2 relative overflow-hidden ${
            activeTab === "buy"
              ? "bg-gradient-to-r from-[#158BF9]/90 to-[#158BF9] hover:from-[#158BF9] hover:to-[#158BF9]/90 text-white"
              : "bg-gradient-to-r from-[#EB483F]/90 to-[#EB483F] hover:from-[#EB483F] hover:to-[#EB483F]/90 text-white"
          } ${isSubmitting ? "opacity-80 cursor-not-allowed" : ""}`}
          aria-label={
            activeTab === "buy" ? "Place buy order" : "Place sell order"
          }
          onClick={handleSubmitTrade}
          disabled={isSubmitting}
        >
          {isSubmitting ? (
            <>
              <svg className="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span>Processing...</span>
            </>
          ) : (
            <>
              {activeTab === "buy" ? (
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M12 5v14"></path>
                  <path d="M19 12l-7-7-7 7"></path>
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M12 19V5"></path>
                  <path d="M5 12l7 7 7-7"></path>
                </svg>
              )}
              <span>{activeTab === "buy" ? "Buy" : "Sell"} {symbol}</span>
            </>
          )}
        </button>

        <div className="mt-2 p-1.5 rounded bg-[#0f171b]/80 border border-[#263136]">
          <div className="flex items-center gap-1.5 justify-center">
            {orderType === "market" ? (
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/40">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white/40">
                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                <line x1="8" y1="21" x2="16" y2="21"></line>
                <line x1="12" y1="17" x2="12" y2="21"></line>
              </svg>
            )}
            <p className="text-center text-[10px] text-white/40">
              {orderType === "market"
                ? "Instant execution at market price."
                : "Order will trigger when price meets condition."}
            </p>
          </div>
        </div>
      </div>
    </aside>
  );
}
